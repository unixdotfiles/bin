#!/usr/bin/env python3

import argparse
import subprocess

from collections import namedtuple

FileMetaData = namedtuple('FileMetaData', ['mode', 'type', 'sha', 'name'])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("ref", nargs="?", default="HEAD")
    args = parser.parse_args()
    files_meta = []
    files = subprocess.check_output(["git", "ls-tree", args.ref])
    max_filename_len = 0
    for line in files.splitlines():
        single_data = FileMetaData(*(line.split(maxsplit=4)))
        files_meta.append(single_data)
        filename_len = len(single_data.name.decode("UTF-8"))
        max_filename_len = max(filename_len, max_filename_len)

    number_space = (len(files_meta) % 10) + 1
    for idx, file in enumerate(files_meta):
        git_log_command = ['git', 'log', '-1']
        git_log_command += ['--pretty=format:%<(15)%C(green)%cr%C(white) | %C(cyan)%h%C(white) | %<(12)%C(yellow)%an%C(white) | %s%Creset']
        git_log_command += ['--', file.name.decode("utf-8")]
        # print(git_log_command)
        git_log_output = subprocess.check_output(git_log_command).decode("UTF-8")
        file_format_marker = "/" if file.type == b"tree" else ""
        filename_output = "{}{}".format(file.name.decode("UTF-8"), file_format_marker)
        out_format = "{:>" + str(number_space) + "} | {fname:<" + str(max_filename_len + 1) + "} -- {glo}{type_marker}"
        print(out_format.format(idx, fname=filename_output, glo=git_log_output, type_marker=file_format_marker))


if __name__ == "__main__":
    main()
