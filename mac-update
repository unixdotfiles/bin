#!/bin/sh

_three_part_version='[^0-9]*([0-9]+\.[0-9]+(\.[0-9]+)?).*'
_version_swap_string="s/$_three_part_version/\1/"

#TODO: replace grep|sed with awk

calibre_latest_version() {
  curl -sSk https://code.calibre-ebook.com/latest
}

Skim_latest_version() {
  curl -sS https://sourceforge.net/p/skim-app/code/HEAD/tree/trunk/Info.plist?format=raw |grep -A2 CFBundleShortVersionString | grep string| sed -E "$_version_swap_string"
}

Audacity_latest_version() {
  # the extra .0 is a hack, but leave for now until I see it matters
  printf "%s.0" $(curl -sS https://api.github.com/repos/audacity/audacity/releases/latest | grep '"name"' | sed -E "$_version_swap_string")
}

HexFiend_latest_version() {
  curl -sS https://api.github.com/repos/ridiculousfish/HexFiend/releases/latest | grep -m1 '"tag_name"' | sed -E "$_version_swap_string"
}

ScrollReverser_latest_version() {
  curl -sS https://api.github.com/repos/pilotmoon/Scroll-Reverser/releases/latest | grep -m1 '"name"' | sed -E "$_version_swap_string"
}

Dolphin_latest_version() {
  curl -sS https://api.github.com/repos/dolphin-emu/dolphin/tags | grep -m2 '"name"' | sed -nE "2${_version_swap_string}p"
}

Firefox_latest_version() {
  curl -sS https://product-details.mozilla.org/1.0/firefox_versions.json | grep LATEST_FIREFOX_DEVEL_VERSION | sed -E "$_version_swap_string"
}

GalaxyClient_latest_version() {
  curl -sS https://cfg.gog.com/desktop-galaxy-updater/5/preview/files-osx.json | grep version | sed -E "$_version_swap_string"
}

OnePassword_latest_version() {
  curl -sSI https://app-updates.agilebits.com/download/OPM4 | grep Location | sed -E "s/.*-$_three_part_version/\1/"
}

UnicodeChecker_latest_version() {
  curl -sS -H 'range: bytes=500-900' https://earthlingsoft.net/UnicodeChecker/appcast.xml |grep shortVersionString |cut -d '"' -f 2
}

Atom_latest_version() {
  curl -s https://api.github.com/repos/atom/atom/releases/latest | grep -m1 '"name"' | sed -E "$_version_swap_string"
}

_info_print() {
  printf "%-30s\t%-30s\t%-30s\n" "$1" "$2" "$3"
}

check_program_version() {
  program="$1"
  installed="$2"
  current="$3"
  if [ "$installed" != "$current" ]
  then
    _info_print "$program" "$current" "$installed"
  else
    _info_print "$program" "$current" "up to date"
  fi
}

check_installed_app() {
  app="$1"
  latest_version="$2"

  current_ver=$(defaults read "/Applications/$app.app/Contents/Info.plist" CFBundleShortVersionString)

  check_program_version "$app" "$current_ver" "$latest_version"

}

app_exists() {
  app="$1"
  [ -e "/Applications/${app}.app" ] 
}

check_app() {
  app="$1"
  latest_version_fn="$2"
  if app_exists "$app"
  then
    latest_version="$($latest_version_fn)"
    check_installed_app "$app" "$latest_version"
  else
    _info_print "$app" "n/a" "n/a"
  fi
}

_info_print "Program" "Latest" "Installed"

check_app calibre "calibre_latest_version"
check_app Skim "Skim_latest_version"
check_app Audacity "Audacity_latest_version"
check_app Firefox "Firefox_latest_version"
check_app UnicodeChecker "UnicodeChecker_latest_version"
check_app 'Scroll Reverser' "ScrollReverser_latest_version"
check_app Dolphin "Dolphin_latest_version"
check_app 'GOG Galaxy' "GalaxyClient_latest_version"
check_app '1Password 6' "OnePassword_latest_version"
check_app 'Hex Fiend' "HexFiend_latest_version"
check_app 'Atom' "Atom_latest_version"
