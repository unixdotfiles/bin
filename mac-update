#!/bin/zsh

unsetopt shwordsplit

# - Amphetamine
# - Amphetamine Enhancer
# - Android File Transfer
# - Authy Desktop
# - Cityographer
# - Discord
# - Dolphin
# - DriveThruRPG
# - FoundryVTT
# - Go64
# - ICue
# - Iterm
# - Itsycal
# - Jamovi
# - Jetbrains Toolbox
# - Openboard
# - Opera Developer
# - Pandora
# - SceneBuilder
# - Slack
# - Steam
# - Textual
# - Transmission
# - VLC
# - Virtualbox
# - Wineskin Winery
# - Wonderdraft
# - Worldographer
# - XMind
# - Yourkit
# - Zoom
# - Zottero
# - lghub

if ! (( $+commands[jq] ))
then
  echo "Ensure jq is on PATH" >&2
  exit 1
fi

_three_part_version='[^0-9]*([0-9]+\.[0-9]+(\.[0-9]+)?).*'
_version_swap_string="s/$_three_part_version/\1/"

_github_releases_latest_version() {
  repo="$1"
  curl -sS "https://api.github.com/repos/${repo}/releases/latest" | jq '.tag_name' | sed -E "$_version_swap_string"
}

_github_tags_latest_version() {
  repo="$1"
  curl -sS "https://api.github.com/repos/${repo}/tags?per_page=1" | jq '.[0].name' | sed -E "${_version_swap_string}"
}

calibre_latest_version() {
  curl -sSk https://code.calibre-ebook.com/latest
}

Skim_latest_version() {
  curl -sS "https://sourceforge.net/p/skim-app/code/HEAD/tree/trunk/Info.plist?format=raw" |grep -A2 CFBundleShortVersionString | grep string | sed -E "$_version_swap_string"
}

Audacity_latest_version() {
  # the extra .0 is a hack, but leave for now until I see it matters
  printf "%s.0" $(curl -sS https://api.github.com/repos/audacity/audacity/releases/latest  | jq '.name' | sed -E "$_version_swap_string")
}

HexFiend_latest_version() {
  _github_releases_latest_version ridiculousfish/HexFiend
}

ScrollReverser_latest_version() {
  _github_releases_latest_version pilotmoon/Scroll-Reverser
}

Dolphin_latest_version() {
  curl -sS "https://api.github.com/repos/dolphin-emu/dolphin/tags?per_page=1&page=2" | jq '.[0].name' | sed -E "${_version_swap_string}"
}

Firefox_latest_version() {
  curl -sS https://product-details.mozilla.org/1.0/firefox_versions.json | jq '.LATEST_FIREFOX_VERSION' | sed -E "$_version_swap_string"
}

#GalaxyClient_latest_version() {
#  curl -sS https://cfg.gog.com/desktop-galaxy-updater/6/preview/files-osx.json | grep version | sed -E "$_version_swap_string"
#}

OnePassword_latest_version() {
  curl -sSI https://app-updates.agilebits.com/download/OPM7 | grep Location | sed -E "s/.*-$_three_part_version/\1/"
}

UnicodeChecker_latest_version() {
  curl -sS -H 'range: bytes=500-900' https://earthlingsoft.net/UnicodeChecker/appcast.xml |grep shortVersionString |cut -d '"' -f 2
}

Merlin_latest_version() {
  curl -sS https://www.projectwizards.net/en/support/release-notes/merlin-project-pwstore/xml |grep shortVersionString | cut -d '"' -f 2 | cut -d ' ' -f 1
}

Atom_latest_version() {
  _github_releases_latest_version atom/atom
}

Clipy_latest_version() {
  _github_releases_latest_version Clipy/Clipy
}

TransmissionGUI_latest_version() {
  v=$(_github_releases_latest_version transmission-remote-gui/transgui)
  printf "Transmission Remote GUI %s" "$v"
}

BackgroundMusic_latest_version() {
  _github_releases_latest_version kyleneideck/BackgroundMusic
}

OpenEmu_latest_version() {
  _github_releases_latest_version OpenEmu/OpenEmu
}

Keycastr_latest_version() {
  _github_releases_latest_version keycastr/keycastr
}

Transmission_latest_version() {
  _github_releases_latest_version transmission/transmission
}

Wireshark_latest_version() {
 _github_tags_latest_version wireshark/wireshark
}

_Unknown() {
  echo unknown
}

_info_print() {
  printf "%-30s\t%-30s\t%-30s\n" "$1" "$2" "$3"
}

check_program_version() {
  program="$1"
  installed="$2"
  current="$3"
  if [ "$installed" != "$current" ]
  then
    _info_print "$program" "$current" "$installed"
  else
    _info_print "$program" "$current" "up to date"
  fi
}

check_installed_app() {
  app="$1"
  latest_version="$2"

  current_ver=$(defaults read "/Applications/$app.app/Contents/Info.plist" CFBundleShortVersionString)

  check_program_version "$app" "$current_ver" "$latest_version"

}

app_exists() {
  app="$1"
  [ -e "/Applications/${app}.app" ] 
}

check_app() {
  app="$1"
  latest_version_fn="$2"
  if app_exists "$app"
  then
    latest_version="$($latest_version_fn)"
    check_installed_app "$app" "$latest_version"
  else
    _info_print "$app" "n/a" "n/a"
  fi
}

_info_print "Program" "Latest" "Installed"

declare -A appdata
appdata=(
Keycastr "Keycastr_latest_version"
Clipy "Clipy_latest_version"
OpenEmu "OpenEmu_latest_version"
calibre "calibre_latest_version"
Skim "Skim_latest_version"
Audacity "Audacity_latest_version"
Firefox "Firefox_latest_version"
UnicodeChecker "UnicodeChecker_latest_version"
"Scroll Reverser" "ScrollReverser_latest_version"
Dolphin "Dolphin_latest_version"
"GOG Galaxy" "_Unknown"
"1Password 6" "OnePassword_latest_version"
"Hex Fiend" "HexFiend_latest_version"
Atom "Atom_latest_version"
Tunnelblick "_Unknown"
"Transmission Remote GUI" "TransmissionGUI_latest_version"
"Merlin Project" "Merlin_latest_version"
"Background Music" "BackgroundMusic_latest_version"
"Transmission" "Transmission_latest_version"
"Wireshark" "Wireshark_latest_version"
)


declare -a whichapps
while getopts 'n:' arg
do
  case $arg in
    n) whichapps+=("$OPTARG");
  esac
done

if [[ ${#whichapps} -eq 0 ]]
then
  whichapps=(${(@k)appdata})
fi

for app in "${(@)whichapps}"
do
  check_app "$app" "${appdata[$app]}"
done

